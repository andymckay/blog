I"è<p>Python mock is pretty cool, but there‚Äôs been a recurring problem for me with <a href="https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock">mock</a>
in that if you access any property on a Mock it returns a method which is <em>truthy</em>. This means
simple typos can exist in your testing.</p>

<p>As an example, in this library, there‚Äôs a method <code>from_nonce</code>. If you just mock the object, then you can typo the method and it continues like normal:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="n">mock</span><span class="p">.</span><span class="n">patch</span><span class="p">(</span><span class="s">'braintree.CreditCard'</span><span class="p">)</span> <span class="k">as</span> <span class="n">mocked</span><span class="p">:</span>
<span class="p">...</span>   <span class="k">assert</span> <span class="n">mocked</span><span class="p">.</span><span class="n">from_none</span>
<span class="p">...</span></code></pre></figure>

<p>This has happened to me and I didn‚Äôt notice when I‚Äôd typo‚Äôd a mock call, like <code>is_called</code>. The test were wrong, but passed quite happily.</p>

<p>The better way is to pass <a href="https://docs.python.org/3/library/unittest.mock.html#the-mock-class">the object to the Mock call</a> as <code>spec</code>. Then only methods on the object can be called, for example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="n">mock</span><span class="p">.</span><span class="n">patch</span><span class="p">(</span><span class="s">'braintree.CreditCard'</span><span class="p">,</span> <span class="n">spec</span><span class="o">=</span><span class="n">braintree</span><span class="p">.</span><span class="n">CreditCard</span><span class="p">)</span> <span class="k">as</span> <span class="n">mocked</span><span class="p">:</span>
<span class="p">...</span>   <span class="k">assert</span> <span class="n">mocked</span><span class="p">.</span><span class="n">from_none</span>
<span class="p">...</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="p">[..</span><span class="n">snip</span><span class="p">]</span>
  <span class="n">File</span> <span class="s">"/Users/andy/.virtualenvs/solitude/lib/python2.7/site-packages/mock.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">658</span><span class="p">,</span> <span class="ow">in</span> <span class="n">__getattr__</span>
    <span class="k">raise</span> <span class="nb">AttributeError</span><span class="p">(</span><span class="s">"Mock object has no attribute %r"</span> <span class="o">%</span> <span class="n">name</span><span class="p">)</span>
<span class="nb">AttributeError</span><span class="p">:</span> <span class="n">Mock</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">'from_none'</span></code></pre></figure>

<p>Much better.</p>

<p><strong>Update:</strong> Paul Winkler points out that instead of passing <code>spec=braintree.CreditCard</code> through you can pass <code>autospec=True</code>. Good call.</p>
:ET