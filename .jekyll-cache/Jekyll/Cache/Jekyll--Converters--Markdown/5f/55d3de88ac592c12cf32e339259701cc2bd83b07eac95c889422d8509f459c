I"É<p>Thereâ€™s lots of blog posts explaining how to use Docker in production. Those posts are filled with things like: donâ€™t run ssh, put only one thing in your container and so on. Thatâ€™s all cool. At the moment however, Mozilla is the opposite way around, we arenâ€™t using Docker in production. But, we are using it development. Iâ€™d like to use Docker in production for our sites and hope I can work with our operations and security to make that happen.</p>

<p>So hereâ€™s some blog posts on how we (the Mozilla Payments team) use Docker in development. After all, pushing to production starts with development.</p>

<p>Credit here to <a href="http://github.com/muffinresearch/">Stuart</a> and <a href="https://github.com/jaredkerim/">Jared</a> who got me started on Docker and solved a few of these things.</p>

<h2 id="use-a-process-manager">Use a process manager</h2>

<p>This is often recommended against, the idea being that a container should do one things and one thing well.</p>

<p>At the end of a Dockerfile there is a <a href="https://docs.docker.com/reference/builder/#cmd">CMD</a> instruction. If that command ever terminates, the container is killed.</p>

<p>Assuming that you are developing on a server that reloads automatically (and why wouldnâ€™t you) <em>you will</em> break your server. Syntax errors, configuration errors, logic errors - you name it. All part of a days work. When that happens, <em>if the reload kills the process then your container exits</em>.</p>

<p>Each stopping of a container slows down your development. So donâ€™t do that.</p>

<p>Instead use a process manager like <a href="http://smarden.org/runit/">runit</a> or <a href="http://supervisord.org/">supervisord</a> to run your process. When you process dies (and it will because thatâ€™s development) your container wonâ€™t die with it. Once youâ€™ve fixed your issue you can kick start your server again with <code>supervisord start [servicename]</code>, in the case of supervisord.</p>
:ET