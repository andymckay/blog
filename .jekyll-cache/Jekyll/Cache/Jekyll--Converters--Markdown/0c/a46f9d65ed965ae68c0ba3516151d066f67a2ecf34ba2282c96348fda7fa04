I"@<p>Tips for developing with Docker.</p>

<h2 id="running-pdb">Running pdb</h2>

<p>This is a Python specific tip, but <a href="https://docs.python.org/3.4/library/pdb.html">pdb</a> is Python specific debugger. Using pdb is pretty useful for Python development, but this tip can apply to any processes that use a pseudo terminal to interact with the process.</p>

<p>If you use <a href="https://docs.docker.com/compose/">docker-compose</a>, you can’t actually run your process and enter an interactive debugging session. There’s been <a href="https://github.com/docker/compose/issues/423">some requests</a> for that but there’s a simpler way. Since we are using a <a href="/2015-05-31-docker-in-development-part-2/">process manager</a>, all you have to do is:</p>

<ul>
    <li><a href="https://docs.docker.com/reference/commandline/cli/#exec">exec</a> into the container, eg: <code>docker exec -ti $(docker ps | grep [servicename] | awk '{print $1}') /bin/bash</code></li>
    <li>stop the process using your process manager, eg: <code>supervisorctl stop [servicename]</code></li>
    <li>start the process from the shell, eg: <code>python manage.py runserver 0.0.0.0:8000</code></li>
</ul>

<p>Then you’ll be able to re-trigger requests and get to your Python prompt. Bear in mind, you’ll have to ensure that any environment variables you set are set correctly. You’ll be able to use pdb as much as want. As soon as you stop and restart the container, it will revert back to it’s normal state again.</p>

<p>See also <a href="/2015-05-31-docker-in-development-part-2/">part 2</a>.</p>
:ET