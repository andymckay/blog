I"§
<p>In this project we are processing text messages. So peice of text comes into a method and needs to be routed to a particular view/method/class/thing. There's lots of ways of doing it, a big <i>if</i> might be one. RapidSMS includes a damn cunning way of doing it by using decorators.</p>
<p>Here's an example:</p>
<pre>    @keyword(r'n(?:ote)? \+(\d+) (.+)')
    @authenticated
    def note_case (self, message, ref_id, note):
         [...]
</pre>
<p>I thought that was really neat, you can <a href="http://github.com/unicefinnovation/rapidsms/blob/19bdbb393417a9f5ee5a56b20983c21272ad700b/lib/rapidsms/parsers/keyworder.py">see the decorator here</a>. Nice stuff!</p>
<p>However since I'm a GOD (Grumpy Old Developer) after using it for about 10 minutes I see there's a basic problem I'm not happy with: I find it hard to track what message goes where. There could be 100's of lines of code between each decorator, its hard to see them all at once.</p>
<p>Hmm. So how about using Django's urlpatterns? I actually like the url regex in Django because it's easy to see in one editor window what is going where.</p>
<p>In my case I made a file: <code>msgs.py</code> that simply maps the regex's to the view:</p>
<pre>from django.conf.urls.defaults import patterns

urlpatterns = patterns('',
    (r'^country (?P<country>\S+)', "apps.testy.views.country",),
    (r'^list (?P<country>\S+)', "apps.testy.views.list",),
)
&lt;/pre&gt;
<p>Then in my app I can use the URLResolver:</p>
<pre>from django.core.urlresolvers import RegexURLResolver, Resolver404

resolver = RegexURLResolver(r'', "apps.testy.msgs")
</pre>
<p>In my class I'm able to use the resolver in a method, on any text:</p>
<pre>       try:
            callback, callback_args, callback_kwargs = resolver.resolve(text)
        except Resolver404:
            raise ValueError, "There was no view found for: %s" % text
            
        response = callback(self, message, *callback_args, **callback_kwargs)
</pre>
<p>And now I can pass text through to different views based on those regex's. The only problem with it is that (understandably) it's using HTTP semantics. That <code>Resolver404</code> inherits from a HTTPError, which isn't ideal for a non HTTP source. Also it's kind of annoying having to call it urlpatterns in <code>msgs.py</code> since they aren't really about URL's.</p>
<p>So then that's where I'd say something like: I've ripped urlpatterns out of Django, made it generic, placed it on pypi, then put a Django wrapper around it for URL'ishness and put it back into the Django project. Except I haven't. But if you were doing a project that included doing logic on a bit of text.... perhaps you could do that.</p>
</country></country></pre>
:ET