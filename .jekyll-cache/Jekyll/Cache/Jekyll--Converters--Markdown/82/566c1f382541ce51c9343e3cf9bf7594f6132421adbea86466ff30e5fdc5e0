I"f<p>Supposing I have a model sample, and column <b>foo</b> for the model samples in the DB. In the following example, what does <code>Sample.find(:first).wtf</code> print out?</p>
<pre>
require 'sampletwo'

class Sample &lt; ActiveRecord::Base
    def wtf
        foo
    end
    
    def foo
        "here 1"
    end
end

def foo    
    "here 2"
end
</pre>
<p>Too easy, the answer is "here 1". Ok how about something a bit harder. What does <code>Sample.find(:first).wtf</code> print out now?</p>
<pre>
class Sample &lt; ActiveRecord::Base
    def wtf
        foo
    end
end
</pre>
<p>Is it the column on the database? <b>No</b>. It's the method <code>foo</code> in the library <code>sampletwo.rb</code>, which you won't know. But is now imported in <code>environment.rb</code>. The order for lookup (if I've got this right is):</p>
<ul>
<li>Does the method exist on the object (and presumably in the inheritance tree, but not sure)</li>
<li>Does the method exist somewhere else in the namespace, eg in the module</li>
<li>Does anything else import that value into the namespace, eg any <code>require</code> you might have in your environment or your current model</li>
<li>Lookup the database column</li>
</ul>
<p>I've never like the fact that Ruby's require imports everything into that namespace the module wants to import, you don't have any choice. It's rather like this in Python:</p>
<pre>from wx import *</pre>
<p>The end result is that when you collaborate on things or end with big honking 2,000 line models you get a huge amount of conflict and sitting there trying to figure out where something comes from. You normally keep your database manager open in another window so you can query it and see what's there.</p>
<p>Meanwhile in Django land, there's an explicit model, explicit import statements (* imports are possible but discouraged in Python) and explicit use of self.</p>
:ET